/Users/vladimirtrifonov/src/playground/solidity/rare-skills/advanced-solidity-bootcamp/auditing&hacking/week6/capture_the_ether-token_sale_challenge/TestTokenSaleChallenge.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.4.21;
  3 |     | 
  4 |     | import "./TokenSaleChallenge.sol";
  5 |     | 
  6 |     | /// @dev Run the template with
  7 |     | ///      ```
  8 |     | ///      solc-select use 0.8.19
  9 |     | ///      echidna ./TestTokenSaleChallenge.sol --contract TestTokenSaleChallenge --config ./config.yaml
 10 | *r  | ///      ```
 11 |     | contract TestTokenSaleChallenge {
 12 |     |     address echidna = tx.origin;
 13 |     |     TokenSaleChallenge token;
 14 |     | 
 15 |     |     constructor() payable {
 16 |     |         token = new TokenSaleChallenge(echidna);
 17 |     |         token.send(1 ether);
 18 |     |     }
 19 |     | 
 20 | *r  |     function test_buy(uint256 amount) public {
 21 | *r  |         amount = amount > 0 ? amount : 100000000;
 22 |     | 
 23 | *r  |         token.buy.value(amount * 1 ether)(amount);
 24 |     | 
 25 | *   |         assert(!token.isComplete());
 26 |     |     }
 27 |     | 
 28 | r   |     function test_sell(uint256 amount) public {
 29 | r   |         uint256 balance = token.balanceOf(echidna);
 30 | r   |         require(balance > 0);
 31 |     |         amount = amount > 0 ? amount : 100000000;
 32 |     |         amount = 1 + (amount % balance);
 33 |     | 
 34 |     |         token.sell(amount);
 35 |     | 
 36 |     |         assert(!token.isComplete());
 37 |     |     }
 38 |     | }
 39 |     | 

/Users/vladimirtrifonov/src/playground/solidity/rare-skills/advanced-solidity-bootcamp/auditing&hacking/week6/capture_the_ether-token_sale_challenge/TokenSaleChallenge.sol
  1 |     | // SPDX-License-Identifier: MIT
  2 |     | pragma solidity ^0.4.21;
  3 | *r  | 
  4 |     | contract TokenSaleChallenge {
  5 | r   |     mapping(address => uint256) public balanceOf;
  6 | *   |     uint256 constant PRICE_PER_TOKEN = 1 ether;
  7 |     | 
  8 |     |     function TokenSaleChallenge(address _player) public {}
  9 |     | 
 10 | *   |     function isComplete() public view returns (bool) {
 11 | *   |         return address(this).balance < 1 ether;
 12 |     |     }
 13 |     | 
 14 | *   |     function buy(uint256 numTokens) public payable {
 15 | *   |         require(msg.value == numTokens * PRICE_PER_TOKEN);
 16 |     | 
 17 | *   |         balanceOf[msg.sender] += numTokens;
 18 |     |     }
 19 |     | 
 20 |     |     function sell(uint256 numTokens) public {
 21 |     |         require(balanceOf[msg.sender] >= numTokens);
 22 |     | 
 23 |     |         balanceOf[msg.sender] -= numTokens;
 24 |     |         msg.sender.transfer(numTokens * PRICE_PER_TOKEN);
 25 |     |     }
 26 |     | 
 27 |     |     function() public payable {}
 28 |     | }
 29 |     | 

